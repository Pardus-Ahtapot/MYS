# Alienvault plugin
# Author: Alienvault Team at plugins@alienvault.com
# Plugin packetfence id:1876 version: 0.0.2
# Last modification: 2017-11-09	13:30
#
# Plugin Selection Info:
# Inverse Inc:PacketFence:-
#
# END-HEADER
#
# Description:
#
#
# 

[DEFAULT]
plugin_id=1876


[config]
type=detector
enable=yes

source=log
location=/var/log/packetFence.log
create_file=true

process=
start=no
stop=no
startup=
shutdown=


[translation]
#	Rule 1
Accepted user = 1
Adding client = 2
Closing connection = 3
ERROR = 4
Ignoring duplicate packet = 5
Login OK = 6
Module rlm_rest became unblocked = 7
Need = 8
Opening additional connection = 9
Rejected in post-auth = 10
Unresponsive child = 33
#	Rule 3
handling radius autz request = 11
does not yet exist in database = 70
#	Rule 4
Connection type is WIRED_MAC_AUTH. = 12
Username was defined = 23
Username was NOT defined or unable to match a role = 22
#	Rule 7
pf::role::fetchRoleForNode = 28
#	Rule 8
pf::Portal::ProfileFactory::_from_profile = 15
#	Rule 9
We found an IP phone through discovery protocols for ifIndex = 66
Could not find any IP phones through discovery protocols for ifIndex = 61
#	Rule 10
pf::Switch::getVlanByName = 17
#	Rule 11
pf::db::db_query_execute = 25
#	Rule 12
fingerbank::DB::SQLite::build_handle = 14
#	Rule 13
pf::radius::switch_access = 29
#	Rule 14
pf::Authentication::Source::HtpasswdSource::authenticate = 16
#	Rule 15
pf::Authentication::Source::LDAPSource::authenticate = 18
#	Rule 16
pf::dhcp::processor::parse_dhcp_ack = 53
pf::dhcp::processor::pf_is_dhcp = 49
pf::dhcp::processor::handle_new_ip = 52
pf::dhcp::processor::parse_dhcp_request = 55
pf::dhcp::processor::parse_dhcp_offer = 54
#	Rule 17
calling violation_add = 59
grace remaining on violation = 67
#	Rule 18
grace expired on violation = 58
violation = 64
#	Rule 19
Rogue DHCP = 42
Alert = 48
#	Rule 20
pf::config::util::pfmailer = 51
##	Rule 100
pf::Switch::NasPortToIfIndex = 21
pf::api::fingerbank_update_component = 19
pf::floatingdevice::portHasFloatingDevice = 24
pf::radius::authorize = 26
pf::role::getRegisteredRole = 31
pf::role::getRegistrationRole = 32
pf::Switch::HP::Procurve_2920::getVoipVsa = 43
pf::Switch::handleReAssignVlanTrapForWiredMacAuth = 44
pf::access_filter::test = 45
pf::accounting::acct_maintenance = 46
pf::action::action_execute = 47
pf::authentication::match = 50
pf::enforcement::_should_we_reassign_vlan = 57
pf::fingerbank::__ANON__ = 60
pf::node::node_register = 62
pf::password::validate_password = 63
pf::violation::violation_force_close = 65
pfconfig::cached::is_valid = 68
main::cluster_check = 72
pf::enforcement::reevaluate_access = 69
##	Rule 200
exception.log = 34
httpd.admin.audit.log = 35
info.log = 36
packetfence.log = 37
pfconfig.log = 38
query.log = 39
redis_cache.log = 40
redis_queue.log = 41
pfmon.log = 56
violation.log = 71
httpd.admin.log = 13

#   Default
_DEFAULT_=20000000


#########################
#         RULES         #
#########################

[0001 - PacketFence - radius]
event_type=event
precheck=" radius"
regexp="(?P<date>\w+\s+\d+\s+\d+:\d+:\d+)\s+(?P<device>\S+)\sradius\S+\s(?P<date_log>\w+\s+\w+\s+\d+\s+\d+:\d+:\d+\s+\d+)\s*:\s*(?:\[mac:(?P<mac>[^]]*)\]\s|(?P<userdata>[^:]+):\s+[^)]+\):?\s*|(?P<level>Info|WARNING|Error):\s)(?:WARNING:\s|rest:\s)?(?P<sid>Module rlm_rest became unblocked|Need|Unresponsive child|Opening additional connection|Ignoring duplicate packet|Adding client|Closing\sconnection|[^:]+):?\s*(?:\(\d+\):\s(?P<reason>[^,]+),|(?:(?:\[(?P<login_id>[^]]+)\]\s\()?from\sclient\s)?(?P<src_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})(?:\sport\s|/)(?P<src_port>\d+)(?:\scli\s(?P<src_mac>[^)]+)\)|\swith\sshared\ssecret\s"(?P<secret>[^"]+)")?|(?:\(\d+\),\s)?\{?(?P<msg>Server\sreturned|"Reply-Message[^}]+|.*):?\}?)"
date={normalize_date($date)}
plugin_sid={translate($sid)}
device={$device}
src_ip={$src_ip}
src_port={$src_port}
userdata1={$mac}
userdata2={$src_mac}
userdata3={$userdata}
userdata4={$level}
userdata5={$reason}
userdata6={$login_id}
userdata7={$msg}
userdata8={$secret}

[0002 - PacketFence - pf::Switch::returnRadiusAccessAccept]
event_type=event
precheck="pf::Switch::returnRadiusAccessAccept"
regexp="(?P<date>\w+\s+\d+\s+\d+:\d+:\d+)\s+(?P<device>\S+)\s\S+\s(?P<date_log>\w+\s+\d+\s+\d+:\d+:\d+)\s\S+\s(?P<level>[^:]+):\s\[mac:(?P<mac>[^]]*)\]\s\((?P<src_ip>[^)]+)\)\s(?P<msg>Added\sVLAN\s(?P<vlan>\S+)\s[^(]+)\((?P<module>pf::Switch::returnRadiusAccessAccept)\)"
date={normalize_date($date)}
plugin_sid=30
device={$device}
src_ip={$src_ip}
userdata1={$level}
userdata2={$mac}
userdata3={$msg}
userdata4={$vlan}

[0003 - PacketFence - pf::radius::authorize]
event_type=event
precheck="pf::radius::authorize"
regexp="(?P<date>\w+\s+\d+\s+\d+:\d+:\d+)\s+(?P<device>\S+)\s\S+\s(?P<date_log>\w+\s+\d+\s+\d+:\d+:\d+)\s\S+\s(?P<level>[^:]+):\s\[mac:(?P<mac>[^]]+)\]\s(?P<sid>handling\sradius\s[^:]+|[^\.]+)(?::\sfrom\sswitch_ip\s=>\s\((?P<switch_ip>[^)]+)\),\sconnection_type\s=>\s(?P<connection_type>[^,]+),\s*switch_mac\s=>\s\((?P<switch_mac>[^)]+)\),\s*mac\s=>\s\[(?P<mac2>[^]]+)\],\sport\s=>\s(?P<port>[^,]*),\s*username\s=>\s"(?P<username>[^"]+)"|\.\s*(?P<msg>[^(]+))\s*\((?P<module>pf::radius::authorize)\)"
date={normalize_date($date)}
plugin_sid={translate($sid)}
device={$device}
src_ip={$switch_ip}
src_port={$port}
username={$username}
userdata1={$level}
userdata2={$mac}
userdata3={$connection_type}
userdata4={$switch_ip}
userdata5={$mac2}
userdata6={$module}
userdata7={$msg}
userdata8={$switch_mac}

[0004 - PacketFence - pf::role::getRegisteredRole]
event_type=event
precheck="pf::role::getRegisteredRole"
regexp="(?P<date>\w+\s+\d+\s+\d+:\d+:\d+)\s+(?P<device>\S+)\s\S+\s(?P<date_log>\w+\s+\d+\s+\d+:\d+:\d+)\s\S+\s(?P<level>[^:]+):\s\[mac:(?P<mac>[^]]+)\]\s(?P<sid>Username was NOT defined or unable to match a role|Username was defined|[^:\.]+[:\.])\s+(?:"(?P<username>[^"]+)"\s|-\s)*(?P<msg>[^(]+)\((?P<module>pf::role::getRegisteredRole)\)"
date={normalize_date($date)}
plugin_sid={translate($sid)}
device={$device}
username={$username}
userdata1={$level}
userdata2={$mac}
userdata3={$msg}
userdata4={$module}

[0005 - PacketFence - pf::Switch::connectRead]
event_type=event
precheck="pf::Switch::connectRead"
regexp="(?P<date>\w+\s+\d+\s+\d+:\d+:\d+)\s+(?P<device>\S+)\s\S+\s(?P<date_log>\w+\s+\d+\s+\d+:\d+:\d+)\s\S+\s(?P<level>[^:]+):\s\[mac:(?P<mac>[^]]+)\]\serror\s+creating\s+SNMP\s+v2c\s+read\s+connection\s+to\s+(?P<src_ip>[^:]+):\sNo\sresponse\sfrom\sremote\shost\s"[^"]+"\s\((?P<module>[^)]+)\)"
date={normalize_date($date)}
plugin_sid=27
device={$device}
src_ip={$src_ip}
userdata1={$level}
userdata2={$mac}
userdata3={$module}

[0006 - PacketFence - Use of uninitialized value]
event_type=event
precheck="Use of uninitialized value"
regexp="(?P<date>\w+\s+\d+\s+\d+:\d+:\d+)\s+(?P<device>\S+)\s\S+\s(?P<date_log>\w+\s+\d+\s+\d+:\d+:\d+)\s\S+\s(?P<level>[^:]+):\s\[mac:(?P<mac>[^]]+)\]\sUse\sof\suninitialized\svalue\s(?P<value>\S*)\s*in.*?at\s(?P<element>\S+)\sline\s\d+\."
date={normalize_date($date)}
plugin_sid=20
device={$device}
userdata1={$level}
userdata2={$mac}
userdata3={$element}
userdata4={$value}

[0007 - PacketFence - pf::role::fetchRoleForNode]
event_type=event
precheck="pf::role::fetchRoleForNode"
regexp="(?P<date>\w+\s+\d+\s+\d+:\d+:\d+)\s+(?P<device>\S+)\s\S+\s(?P<date_log>\w+\s+\d+\s+\d+:\d+:\d+)\s\S+\s(?P<level>[^:]+):\s\[mac:(?P<mac>[^]]+)\]\sPID:\s"(?P<pid>[^"]*)",\sStatus:\s+(?P<status>\S*)\sReturned\sVLAN:\s\((?P<vlan>[^)]+)\),\sRole:\s(?P<role>\S*)\s+\((?P<module>pf::role::fetchRoleForNode)\)"
date={normalize_date($date)}
plugin_sid={translate($module)}
device={$device}
userdata1={$level}
userdata2={$mac}
userdata3={$pid}
userdata4={$status}
userdata5={$vlan}
userdata6={$role}

[0008 - PacketFence - pf::Portal::ProfileFactory::_from_profile]
event_type=event
precheck="pf::Portal::ProfileFactory::_from_profile"
regexp="(?P<date>\w+\s+\d+\s+\d+:\d+:\d+)\s+(?P<device>\S+)\s\S+\s(?P<date_log>\w+\s+\d+\s+\d+:\d+:\d+)\s\S+\s(?P<level>[^:]+):\s\[mac:(?P<mac>[^]]+)\]\s(?P<msg>[^(]+)\s+\((?P<module>pf::Portal::ProfileFactory::_from_profile)\)"
date={normalize_date($date)}
plugin_sid={translate($module)}
device={$device}
userdata1={$level}
userdata2={$mac}

[0009 - PacketFence - pf::Switch::getPhonesDPAtIfIndex]
event_type=event
precheck="pf::Switch::getPhonesDPAtIfIndex"
regexp="(?P<date>\w+\s+\d+\s+\d+:\d+:\d+)\s+(?P<device>\S+)\s\S+\s(?P<date_log>\w+\s+\d+\s+\d+:\d+:\d+)\s\S+\s(?P<level>[^:]+):\s\[mac:(?P<mac>[^]]+)\]\s(?P<sid>Could not find any IP phones through discovery protocols for ifIndex|We found an IP phone through discovery protocols for ifIndex|[^(]+)\s+\d*\s*\((?P<module>pf::Switch::getPhonesDPAtIfIndex)\)"
date={normalize_date($date)}
plugin_sid={translate($sid)}
device={$device}
userdata1={$level}
userdata2={$mac}

[0010 - PacketFence - pf::Switch::getVlanByName]
event_type=event
precheck="pf::Switch::getVlanByName"
regexp="(?P<date>\w+\s+\d+\s+\d+:\d+:\d+)\s+(?P<device>\S+)\s\S+\s(?P<date_log>\w+\s+\d+\s+\d+:\d+:\d+)\s\S+\s(?P<level>[^:]+):\s\[mac:(?P<mac>[^]]+)\]\s(?P<msg>No parameter Vlan found in\s(?P<file>\S+)\sfor\sthe\sswitch\s(?P<switch_ip>\S+))\s+\((?P<module>pf::Switch::getVlanByName)\)"
date={normalize_date($date)}
plugin_sid={translate($module)}
device={$device}
src_ip={$switch_ip}
filename={$file}
userdata1={$level}
userdata2={$mac}

[0011 - PacketFence - pf::db::db_query_execute]
event_type=event
precheck="pf::db::db_query_execute"
regexp="(?P<date>\w+\s+\d+\s+\d+:\d+:\d+)\s+(?P<device>\S+)\s\S+\s(?P<date_log>\w+\s+\d+\s+\d+:\d+:\d+)\s\S+\s(?P<level>[^:]+):\s\[mac:(?P<mac>[^]]+)\]\s+(?P<msg>database query failed\swith:\s+Column\s'(?P<column>[^']+)'\scannot\sbe\snull\s\([^)]+\))\s+\((?P<module>pf::db::db_query_execute)\)"
date={normalize_date($date)}
plugin_sid={translate($module)}
device={$device}
userdata1={$level}
userdata2={$mac}
userdata3={$column}

[0012 - PacketFence - fingerbank::DB::SQLite::build_handle]
event_type=event
precheck="fingerbank::DB::SQLite::build_handle"
regexp="(?P<date>\w+\s+\d+\s+\d+:\d+:\d+)\s+(?P<device>\S+)\s\S+\s(?P<date_log>\w+\s+\d+\s+\d+:\d+:\d+)\s\S+\s(?P<level>[^:]+):\s\[mac:(?P<mac>[^]]+)\]\s+(?P<msg>Database\s(?P<database>\S+)[^(]+)\s+\((?P<module>fingerbank::DB::SQLite::build_handle)\)"
date={normalize_date($date)}
plugin_sid={translate($module)}
device={$device}
userdata1={$level}
userdata2={$mac}
userdata3={$database}

[0013 - PacketFence - pf::radius::switch_access]
event_type=event
precheck="pf::radius::switch_access"
regexp="(?P<date>\w+\s+\d+\s+\d+:\d+:\d+)\s+(?P<device>\S+)\s\S+\s(?P<date_log>\w+\s+\d+\s+\d+:\d+:\d+)\s\S+\s(?P<level>[^:]+):\s\[mac:(?:\[undef\]|(?P<mac>[^]]+))\]\s+(?P<msg>User\s(?P<username>\S+)\stried\sto\slogin\sin\s(?P<src_ip>\S+)[^(]+)\s+\((?P<module>pf::radius::switch_access)\)"
date={normalize_date($date)}
plugin_sid={translate($module)}
device={$device}
src_ip={$src_ip}
username={$username}
userdata1={$level}
userdata2={$mac}

[0014 - PacketFence - pf::Authentication::Source::HtpasswdSource::authenticate]
event_type=event
precheck="pf::Authentication::Source::HtpasswdSource::authenticate"
regexp="(?P<date>\w+\s+\d+\s+\d+:\d+:\d+)\s+(?P<device>\S+)\s\S+\s(?P<date_log>\w+\s+\d+\s+\d+:\d+:\d+)\s\S+\s(?P<level>[^:]+):\s\[mac:(?:\[undef\]|(?P<mac>[^]]+))\]\s+(?P<msg>unable to read password file\s'(?P<file>[^']+)')\s+\((?P<module>pf::Authentication::Source::HtpasswdSource::authenticate)\)"
date={normalize_date($date)}
plugin_sid={translate($module)}
device={$device}
filename={$file}
userdata1={$level}
userdata2={$mac}

[0015 - PacketFence - pf::Authentication::Source::LDAPSource::authenticate]
event_type=event
precheck="pf::Authentication::Source::LDAPSource::authenticate"
regexp="(?P<date>\w+\s+\d+\s+\d+:\d+:\d+)\s+(?P<device>\S+)\s\S+\s(?P<date_log>\w+\s+\d+\s+\d+:\d+:\d+)\s\S+\s(?P<level>[^:]+):\s(?:\[mac:(?:\[undef\]|(?P<mac>[^]]+))\]\s+)?(?P<msg>(?:\[AD\]\sUser\sCN|.*?\(sAMAccountName)=(?P<username>[^),]+)(?:\)\sfrom\s[^(]+|,OU[^(]+))\s*\((?P<module>pf::Authentication::Source::LDAPSource::authenticate)\)"
date={normalize_date($date)}
plugin_sid={translate($module)}
device={$device}
username={$username}
userdata1={$level}
userdata2={$mac}

[0016 - PacketFence - pf::dhcp::]
event_type=event
precheck="pf::dhcp::"
regexp="(?P<date>\w+\s+\d+\s+\d+:\d+:\d+)\s+(?P<device>\S+)\s\S+\s(?P<date_log>\w+\s+\d+\s+\d+:\d+:\d+)\s\S+\s(?P<level>[^:]+):\s\[mac:(?:\[undef\]|(?P<mac>[^]]+))\]\s+(?:(?:DHCP\S+.*?from\s|Updating.*?for\s)(?:\(?(?P<src_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\)?\s*|\(?(?P<mac_src>\w+:\w+:\w+:\w+:\w+:\w+)\)?\s)+|(?:to\shost\s|->\s)(?P<mac_dst>\w+:\w+:\w+:\w+:\w+:\w+)?\s*\(?(?P<dst_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\)?)*[^(]*\s\((?P<module>pf::dhcp::[^)]+)\)"
date={normalize_date($date)}
plugin_sid={translate($module)}
device={$device}
src_ip={$src_ip}
dst_ip={$dst_ip}
userdata1={$level}
userdata2={$mac}
userdata3={$mac_src}
userdata4={$mac_dst}

[0017 - PacketFence - pf::violation::violation_trigger]
event_type=event
precheck="pf::violation::violation_trigger"
regexp="(?P<date>\w+\s+\d+\s+\d+:\d+:\d+)\s+(?P<device>\S+)\s\S+\s(?P<date_log>\w+\s+\d+\s+\d+:\d+:\d+)\s\S+\s(?P<level>[^:]+):\s\[mac:(?:\[undef\]|(?P<mac>[^]]+))\]\s+\d*\s*(?P<sid>calling\sviolation_add|grace remaining on violation)\s*(?:with\svid=(?P<vid>\S+)\smac=(?P<mac2>\S+)\srelease_date=(?P<release_date>\S+)\s\([^)]+\)|\d+\s\([^)]+\)\sfor\snode\s(?P<mac3>[^\s\.]+)\.?[^(]+)\s*\((?P<module>pf::violation::violation_trigger)\)"
date={normalize_date($date)}
plugin_sid={translate($sid)}
device={$device}
userdata1={$level}
userdata2={$mac}
userdata3={$vid}
userdata4={$release_date}
userdata5={$mac2}
userdata6={$mac3}

[0018 - PacketFence - pf::violation::violation_add]
event_type=event
precheck="pf::violation::violation_add"
regexp="(?P<date>\w+\s+\d+\s+\d+:\d+:\d+)\s+(?P<device>\S+)\s\S+\s(?P<date_log>\w+\s+\d+\s+\d+:\d+:\d+)\s\S+\s(?P<level>[^:]+):\s\[mac:(?:\[undef\]|(?P<mac>[^]]+))\]\s+\d*\s*(?P<sid>violation|grace\sexpired\son\sviolation)[^(]+\s*\((?P<module>pf::violation::violation_add)\)"
date={normalize_date($date)}
plugin_sid={translate($sid)}
device={$device}
userdata1={$level}
userdata2={$mac}

[0019 - PacketFence - pf::action::action_log]
event_type=event
precheck="pf::action::action_log"
regexp="(?P<date>\w+\s+\d+\s+\d+:\d+:\d+)\s+(?P<device>\S+)(?:\s\S+\s(?P<date_log>\w+\s+\d+\s+\d+:\d+:\d+)\s\S+\s(?P<level>[^:]+):\s\[mac:(?P<mac>[^]]+)\])?\s(?P<file>/\S+)\s(?P<date_log2>\d+-\d+-\d+\s\d+:\d+:\d+):\s(?P<sid>Alert|Rogue\s\S+)\s\([^)]+\)\sdetected\son\snode\s(?P<mac_node>\S+)\s\((?P<ip>[^)]+)\)\s\((?P<module>pf::action::action_log)\)"
date={normalize_date($date)}
plugin_sid={translate($sid)}
device={$device}
src_ip={$ip}
filename={$file}
userdata1={$level}
userdata2={$mac}
userdata3={$mac_node}

[0020 - PacketFence - pf::config::util::pfmailer]
event_type=event
precheck="pf::config::util::pfmailer"
regexp="(?P<date>\w+\s+\d+\s+\d+:\d+:\d+)\s+(?P<device>\S+)(?:\s\S+\s(?P<date_log>\w+\s+\d+\s+\d+:\d+:\d+)\s\S+\s(?P<level>[^:]+):\s\[mac:(?P<mac>[^]]+)\])?\s(?P<sid>email\sregarding\s'PF\sAlert:.*?detection\son\s(?P<mac_node>\S+)'\ssent\sto\s(?P<username>[^@]+)\@(?P<domain>\S+))\s\((?P<module>pf::config::util::pfmailer)\)"
date={normalize_date($date)}
plugin_sid={translate($module)}
device={$device}
username={$username}
userdata1={$level}
userdata2={$mac}
userdata3={$domain}

[0100 - PacketFence - Generic log with module]
event_type=event
regexp="(?P<date>\w+\s+\d+\s+\d+:\d+:\d+)\s+(?P<device>\S+)(?:(?:\s\S+\s(?P<date_log>\w+\s+\d+\s+\d+:\d+:\d+)\s\S+\s)?(?P<level>[^:]+):\s(?:\[mac:(?P<mac>[^]]+)\])?)?\s*(?P<msg>[^(]+)(?:\(admin_modify\scalled\)\s)?\((?P<module>main::cluster_check|pf[^)]+)\)"
date={normalize_date($date)}
plugin_sid={translate($module)}
device={$device}
userdata1={$level}
userdata2={$mac}
userdata3={$msg}

[0200 - PacketFence - Generic log]
event_type=event
regexp="(?P<date>\w+\s+\d+\s+\d+:\d+:\d+)\s+(?P<device>\S+)\s(?P<sid>\S+)\s(?:(?:\d+:\S+\s)?(?:\{"status":(?P<status>[^,]+),"context":"(?P<context>[^"]+)","action":"(?P<action>[^"]+)","user":"?(?P<username>[^"]+)","macs":\[(?P<macs>[^]]+)\],"happened_at":"(?P<time>[^"]+)"\}|(?P<date_log>\w*\s*\S+\s+\w+\s+\d+:\d+:\d+|\d+/\d+/\d+\s+\d+:\d+:\d+)\.?\d*\s\S+\s)?(?:(?P<level>[^:]+):\s|::\s)?(?:\[mac:(?P<mac>[^]]+)\]\s)?(?:(?P<ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}):(?P<port>\d+)|Unknown key config::(?P<switch>.*)|.*?['"].*?(?P<file>/[^\s"']+)|.*))"
date={normalize_date($date)}
plugin_sid={translate($sid)}
device={$device}
src_ip={$ip}
filename={$file}
username={$username}
userdata1={$level}
userdata2={$mac}
userdata3={$switch}
userdata4={$status}
userdata5={$action}
userdata6={$macs}
userdata7={$context}
userdata8={$time}