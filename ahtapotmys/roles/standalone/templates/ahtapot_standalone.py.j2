#!/usr/bin/python
import argparse
import datetime
import os
import shutil
import subprocess
import sys
import yaml
from ansible.inventory import Inventory
from ansible.parsing.dataloader import DataLoader
from ansible.vars import VariableManager

ANSIBLE_DIR = "{{standalone.directory}}"
PLAYBOOK_DIR = "{0}/playbooks".format(ANSIBLE_DIR)
ANSIBLE_HOST_FILE = "{0}/hosts".format(ANSIBLE_DIR)
BRANCH = "{{standalone.branch}}"
GIT_REPO = "{{standalone.ansible_git_url}}"

def initialize_argparser():
    parser = argparse.ArgumentParser()
    parser.add_argument("--host", help="fqdn of host that playbook will run on. Needed when pull is used", default="not a valid hostname")
    parser.add_argument("--pull", action="store_true", help="pull playbooks and run if needed. It should be run on remote device")
    parser.add_argument("--push", action="store_true", help="push changed playbooks. It should be used on post-commit hook")
    return parser.parse_args()

def parse_playbooks():
    ret = {}
    for pb_file in os.listdir(PLAYBOOK_DIR):
        if pb_file == 'state.yml' or pb_file == 'standalone.yml' or not pb_file.lower().endswith(".yml"):
            continue
        with open("{0}/{1}".format(PLAYBOOK_DIR, pb_file)) as f:
            content = yaml.load(f)[0]
            ret[pb_file] = content
    return ret

def run_ansible_playbook(playbook):
    cmdd = "/usr/bin/ansible-playbook {0}/{1}".format(PLAYBOOK_DIR, playbook)
    print cmdd
    subprocess.check_call(cmdd, shell=True)

def run_ansible_pull(playbook):
    cmdd = "/usr/bin/ansible-pull -U {0} -C {1} --accept-host-key --full -d {2} {3}/{4}".format(GIT_REPO, BRANCH, ANSIBLE_DIR, PLAYBOOK_DIR, playbook)
    subprocess.check_call(cmdd, shell=True)


if __name__ == "__main__":

    args = initialize_argparser()

    new_clone = False
    if not os.path.isdir('{0}/.git'.format(ANSIBLE_DIR)) or not os.path.isdir(ANSIBLE_DIR):
        # ansible dir is not a git repo. we need to clone git repo
        if os.path.isdir(ANSIBLE_DIR):
            shutil.move(ANSIBLE_DIR, ANSIBLE_DIR + ".bak.{0}".format(str(datetime.datetime.now().strftime("%Y%m%d%H%M"))))
        cmd = "/usr/bin/git clone -b {0} {1} {2}".format(BRANCH, GIT_REPO, ANSIBLE_DIR)
        new_clone = True  # we will use it for pull process
        subprocess.check_call(cmd, shell=True)

    loader = DataLoader()
    variable_manager = VariableManager()
    inventory = Inventory(loader=loader, variable_manager=variable_manager, host_list=ANSIBLE_HOST_FILE)
    host_list = {}
    # host_list format will be like this
    # {'host_fqdn': {
    #       'playbooks': {
    #           'antispam.yml': {
    #               'playbook': 'antispam.yml',
    #               'roles': ['base',
    #                         'spamassassin'
    #                        ]
    #           }
    #       },
    #       'groups': ['all',
    #                'antispam']
    #       }
    # }


    for host in inventory.get_hosts():
        # print host, host.get_groups()
        host_list[str(host)] = {'groups': map(str, host.get_groups())}

    # get hosts with their roles and playbooks
    playbooks = parse_playbooks()
    for fqdn, host_dict in host_list.iteritems():
        host_list[fqdn]['playbooks'] = {}
        for pb_name, playbook_yaml in playbooks.iteritems():
            if playbook_yaml['hosts'] != 'all' and playbook_yaml['hosts'] in host_dict['groups']:
                host_list[fqdn]['playbooks'][pb_name] = {'playbook': pb_name, 'roles': []}
                try:
                    host_list[fqdn]['playbooks'][pb_name]['roles'] = [x['role'] for x in playbook_yaml['roles']]
                except TypeError:
                    host_list[fqdn]['playbooks'][pb_name]['roles'] = [x for x in playbook_yaml['roles']]

    if args.pull:
        print "Standalone pull is processing"
        if args.host not in host_list.keys():
            print "Please provide valid host"
            sys.exit(1)

        if new_clone:
            for pb_name in host_list[args.host]['playbooks'].keys():
                run_ansible_pull(pb_name)
            sys.exit(0)
        else:
            cmd = "cd {0} && /usr/bin/git rev-parse HEAD".format(ANSIBLE_DIR)
            last_hash = subprocess.check_output(cmd, shell=True).strip()
            subprocess.check_call("cd {0} && /usr/bin/git checkout {1}".format(ANSIBLE_DIR, BRANCH), shell=True)
            subprocess.check_call("cd {0} && /usr/bin/git pull origin {1}".format(ANSIBLE_DIR, BRANCH), shell=True)
            new_hash = subprocess.check_output(cmd, shell=True).strip()

            if last_hash != new_hash:
                # we need to check differences
                for pb_name in host_list[args.host]['playbooks'].keys():
                    cmd = "cd {0} && /usr/bin/git diff --name-only {1} {2} | " \
                          "egrep -q -e \"roles/({3})\"".format(ANSIBLE_DIR, last_hash, new_hash, "|".join(host_list[args.host]['playbooks'][pb_name]['roles']))
                    try:
                        subprocess.check_call(cmd, shell=True)
                        run_ansible_pull(pb_name)
                    except subprocess.CalledProcessError:
                        pass  # there is no difference. do nothing
    elif args.push:
        print "Standalone push is processing"
        for pb_name, playbook_yaml in playbooks.iteritems():
            if playbook_yaml['hosts'] == 'all':
                continue
            try:
                roles = [x['role'] for x in playbook_yaml['roles']]
            except TypeError:
                roles = [x for x in playbook_yaml['roles']]
            cmd = "cd {0} && /usr/bin/git diff --name-only HEAD~1 HEAD | egrep -q -e \"roles/({1})\"".format(ANSIBLE_DIR, "|".join(roles))
            try:
                subprocess.check_call(cmd, shell=True)
                run_ansible_playbook(pb_name)
            except subprocess.CalledProcessError:
                pass  # there is no difference. do nothing