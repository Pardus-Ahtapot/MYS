---
#- name: installing lxc packages
#  sudo: yes
#  apt:
#    name: "{{ item }}"
#  with_items:
#    - python3-lxc
#    - lxc
#    - liblxc1
#    - wget

- name: copying bridge script
  sudo: yes
  template:
    src: "br0.j2"
    dest: "/etc/network/interfaces.d/{{lxc[inventory_hostname]['network_link']}}"
    owner: "root"
    group: "root"
    mode: 0755
  when: lxc[inventory_hostname].network_type == "veth"

- name: ifup bridge
  sudo: yes
  command: /sbin/ifup {{lxc[inventory_hostname]['network_link']}}
  when: lxc[inventory_hostname].network_type == "veth"

- name: modifying default.conf
  sudo: yes
  template:
    src: "default.conf.j2"
    dest: "/etc/lxc/default.conf"
    owner: "root"
    group: "root"
    mode: 0644
  notify: restart lxc-net

- name: creating honeypot containers
  sudo: yes
  shell: if [ ! -e /var/lib/lxc/{{item.type}} ]; then lxc-create --name={{item.type}} --template=pardus -- --arch=amd64 --release=onyedi --enable-non-free --mirror={{container_mirror}} --security-mirror={{container_security_mirror}}; fi
  with_items: containers[inventory_hostname]

- name: stopping containers
  sudo: yes
  shell: lxc-stop -n {{item.type}} || true
  with_items: containers[inventory_hostname]

- name: configuring honeypot config
  sudo: yes
  shell: |
    egrep -q '^lxc.start.auto' /var/lib/lxc/{{item.type}}/config || echo 'lxc.start.auto = {{item.start_auto}}' >> /var/lib/lxc/{{item.type}}/config
    sed "s/^lxc.start.auto.*/lxc.start.auto = {{item.start_auto}}/g" /var/lib/lxc/{{item.type}}/config
    egrep -q '^lxc.start.delay' /var/lib/lxc/{{item.type}}/config || echo 'lxc.start.delay = {{item.start_delay}}' >> /var/lib/lxc/{{item.type}}/config
    sed "s/^lxc.start.delay.*/lxc.start.delay = {{item.start_delay}}/g" /var/lib/lxc/{{item.type}}/config
    egrep -q '^lxc.start.order' /var/lib/lxc/{{item.type}}/config || echo 'lxc.start.order = {{item.start_order}}' >> /var/lib/lxc/{{item.type}}/config
    sed "s/^lxc.start.order.*/lxc.start.order = {{item.start_order}}/g" /var/lib/lxc/{{item.type}}/config
  with_items: containers[inventory_hostname]

- name: configuring honeypot interfaces
  sudo: yes
  template:
    src: "network.j2"
    dest: "/var/lib/lxc/{{item.type}}/rootfs/etc/network/interfaces"
    owner: "root"
    group: "root"
    mode: 0644
  with_items: containers[inventory_hostname]

- name: starting containers
  sudo: yes
  shell: lxc-start -n {{item.type}}
  with_items: containers[inventory_hostname]

#- name: installing cowrie honeypot
#  sudo: yes
#  shell: lxc-attach -n cowrie -- /bin/bash -c "export DEBIAN_FRONTEND=noninteractive; apt-get -yq install cowrie wget sudo"
#  when: item.type == "cowrie"
#  with_items: containers[inventory_hostname]

- name: copy deploy cowrie script
  sudo: yes
  template:
    src: "cowrie_deploy.sh.j2"
    dest: "/var/lib/lxc/{{item.type}}/rootfs/usr/sbin/cowrie_deploy.sh"
    owner: "root"
    group: "root"
    mode: 0755
  when: item.type == "cowrie"
  with_items: containers[inventory_hostname]

- name: copy cowrie.cfg
  sudo: yes
  template:
    src: "cowrie.cfg.j2"
    dest: "/var/lib/lxc/{{item.type}}/rootfs/opt/cowrie/etc/cowrie.cfg"
    owner: "root"
    group: "root"
    mode: 0644
  when: item.type == "cowrie"
  with_items: containers[inventory_hostname]

- name: registering cowrie honeypot
  sudo: yes
  shell: lxc-attach -n cowrie -- /bin/bash -c "if [ ! -e {{cowrie_register_check_file}} ]; then /usr/sbin/cowrie_deploy.sh {{mhn_url}} {{mhn_deploy_key}}; fi"
  when: item.type == "cowrie"
  with_items: containers[inventory_hostname]

- name: registering cowrie honeypot with force
  sudo: yes
  shell: lxc-attach -n cowrie -- /usr/sbin/cowrie_deploy.sh {{mhn_url}} {{mhn_deploy_key}}
  when: item.type == "cowrie" and item.force_register == true
  with_items: containers[inventory_hostname]

- name: restarting cowrie honeypot
  sudo: yes
  shell: lxc-attach -n cowrie -- supervisorctl restart cowrie
  when: item.type == "cowrie"
  with_items: containers[inventory_hostname]

